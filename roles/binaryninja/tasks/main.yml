---
- name: Check for Binary ninja
  stat:
    path: '{ binary_ninja_zip }}'
  register: binaryninja

- name: Check for Binary ninja personal
  stat:
    path: '{ binary_ninja_personal_zip }}'
  register: binaryninja_personal

- name: Get Binary ninja personal
  unarchive:
    src: '{{ binary_ninja_personal_zip }}'
    dest: '{{ tool_dir }}'
    creates: '{{ tool_dir }}/binaryninja/binaryninja'
  when: binaryninja_personal.stat.exists

- name: Get Binary ninja
  unarchive:
    src: '{{ binary_ninja_zip }}'
    dest: '{{ tool_dir }}'
    creates: '{{ tool_dir }}/binaryninja/binaryninja'
  when: binaryninja.stat.exists

- name: Check for Binary ninja license
  stat:
    path: '{ binary_ninja_license }}'
  register: binaryninja_license

- name: Make binaryninja config dir
  file:
    path: '{{ binary_ninja_config_dir }}'
    state: directory
  when: binaryninja_license.stat.exists

- name: Install Binary ninja license
  copy:
    dest: '{{ binary_ninja_license_dest }}'
    src: '{{ binary_ninja_license }}'
  when: binaryninja_license.stat.exists

- name: Add binaryninja to PATH
  lineinfile:
    path: '{{ bash_rc }}'
    line: 'PATH=$PATH:{{ tool_dir }}/binaryninja/'

- name: change mod+n entry to mod+u.
  replace:
    path: '{{ regolith_i3_config }}'
    regexp: '^bindsym\ \$mod\+n\ exec\ \$i3-wm.program.notification_ui'
    replace: 'bindsym $mod+u exec $i3-wm.program.notification_ui'

- name: Setup BinaryNinja regolith configuration.
  blockinfile:
    path: '{{ regolith_i3_config }}'
    marker: '# {mark} Adding BinaryNinja config'
    block: |
      assign [class="Binary Ninja"] Binja
      bindsym $mod+n exec {{ tool_dir }}/binaryninja/binaryninja
  when: regolith_i3_config is defined

- name: Setup BinaryNinja regolith window configuration.
  blockinfile:
    path: '{{ home_dir }}.config/regolith/Xresources'
    marker: '! {mark} Adding regolith BinaryNinja config'
    block: |
      i3-wm.workspace.03.name:  "3:<span font_desc='Source Code Pro Medium 13'> Binja </span><span foreground='#2aa198'>ïƒˆ</span>"
